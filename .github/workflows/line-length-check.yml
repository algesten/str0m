name: Line Length Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-line-length:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check line length
        shell: bash
        env:
          # Configure file-specific line length limits
          # Format: "file_pattern:max_length;file_pattern:max_length;..."
          FILE_CONFIGS: "CHANGELOG.md:80;*.md:110;*.rs:110;*.toml:110;.github/workflows/line-length-check.yml:150"
          # Default line length for files not matching any pattern
          DEFAULT_MAX_LENGTH: "110"
        run: |
          # Get the base and head commit SHAs
          BASE_SHA=$(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          HEAD_SHA=${{ github.event.pull_request.head.sha }}

          # Create a temporary file to track violations
          VIOLATIONS_FILE=$(mktemp)

          # Parse file configs into an array for easier processing
          # We don't use associative arrays as they can be problematic with glob patterns as keys
          FILE_PATTERN_ARRAY=()
          LENGTH_ARRAY=()

          IFS=';' read -ra CONFIGS <<< "$FILE_CONFIGS"
          for CONFIG in "${CONFIGS[@]}"; do
            if [[ "$CONFIG" == *":"* ]]; then
              PATTERN=${CONFIG%%:*}
              LENGTH=${CONFIG#*:}
              FILE_PATTERN_ARRAY+=("$PATTERN")
              LENGTH_ARRAY+=("$LENGTH")
            fi
          done

          # Function to determine max length for a file
          get_max_length() {
            local file="$1"
            local max_length=$DEFAULT_MAX_LENGTH

            for i in "${!FILE_PATTERN_ARRAY[@]}"; do
              pattern="${FILE_PATTERN_ARRAY[$i]}"
              # Handle exact match
              if [[ "$file" == "$pattern" ]]; then
                max_length="${LENGTH_ARRAY[$i]}"
                break
              # Handle glob pattern match
              elif [[ "$pattern" == *"*"* ]]; then
                # Use case statement for glob matching which works better in bash
                case "$file" in
                  $pattern)
                    max_length="${LENGTH_ARRAY[$i]}"
                    break
                    ;;
                esac
              fi
            done

            echo "$max_length"
          }

          # Summary of configurations
          echo "Line length configurations:"
          for i in "${!FILE_PATTERN_ARRAY[@]}"; do
            echo "  - ${FILE_PATTERN_ARRAY[$i]}: ${LENGTH_ARRAY[$i]} characters"
          done
          echo "  - Default: $DEFAULT_MAX_LENGTH characters"

          # Loop through each changed file
          for FILE in $(git diff --name-only $BASE_SHA $HEAD_SHA); do
            # Skip binary files and files that don't exist anymore
            if [ ! -f "$FILE" ] || [ -z "$(file --mime "$FILE" | grep -i "text")" ]; then
              continue
            fi

            # Set line length limit based on file
            MAX_LENGTH=$(get_max_length "$FILE")

            # Extract and process each added line from the diff
            git diff -U0 $BASE_SHA $HEAD_SHA -- "$FILE" | grep '^+' | grep -v '^+++' | while read -r LINE; do
              # Remove the leading + and check line length
              CONTENT="${LINE:1}"
              LENGTH=${#CONTENT}

              if [ $LENGTH -gt $MAX_LENGTH ]; then
                TRIMMED_PREVIEW=$(echo "${CONTENT:0:50}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
                echo "$FILE: Line exceeds $MAX_LENGTH characters ($LENGTH): '$TRIMMED_PREVIEW'" >> "$VIOLATIONS_FILE"
                echo "::warning file=$FILE::$FILE: Line exceeds $MAX_LENGTH characters: $TRIMMED_PREVIEW"
              fi
            done
          done

          # Check if we found any violations
          if [ -s "$VIOLATIONS_FILE" ]; then
            exit 1
          else
            echo "âœ… All added lines are within the character limits."
          fi

          # Clean up
          rm -f "$VIOLATIONS_FILE"